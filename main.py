
import logging
import os
import json
import csv
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATOR_CHAT_ID = int(os.getenv("MODERATOR_CHAT_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

BANNED_USERS_FILE = "banned_users.json"

def load_banned_users():
    if os.path.exists(BANNED_USERS_FILE):
        with open(BANNED_USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_banned_users(users):
    with open(BANNED_USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f)

class ProductForm(StatesGroup):
    category = State()
    city = State()
    name = State()
    photos = State()
    description = State()
    delivery = State()
    confirm = State()

@dp.message_handler(commands=['start', 'sell'])
async def cmd_start(message: Message):
    if message.from_user.id in load_banned_users():
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        return
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì¶ –û–¥–µ–∂–¥–∞", callback_data="cat_clothes"),
        InlineKeyboardButton("üì± –¢–µ—Ö–Ω–∏–∫–∞", callback_data="cat_tech")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    await ProductForm.category.set()

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"), state=ProductForm.category)
async def category_selected(call: CallbackQuery, state: FSMContext):
    await state.update_data(category=call.data.replace("cat_", ""))
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üìç –ú–æ—Å–∫–≤–∞", callback_data="city_moscow"),
        InlineKeyboardButton("üìç –ü–∏—Ç–µ—Ä", callback_data="city_spb")
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await ProductForm.city.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("city_"), state=ProductForm.city)
async def city_selected(call: CallbackQuery, state: FSMContext):
    await state.update_data(city=call.data.replace("city_", ""))
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await ProductForm.name.set()
    await call.answer()

@dp.message_handler(state=ProductForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await ProductForm.photos.set()

@dp.message_handler(content_types=['photo'], state=ProductForm.photos)
async def get_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    if len(photos) >= 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await ProductForm.description.set()
    else:
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="skip_photos"))
        await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "skip_photos", state=ProductForm.photos)
async def skip_photos(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await ProductForm.description.set()
    await call.answer()

@dp.message_handler(state=ProductForm.description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_delivery"),
        InlineKeyboardButton("ü§ù –í—Å—Ç—Ä–µ—á–∞", callback_data="delivery_meeting")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=kb)
    await ProductForm.delivery.set()

@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=ProductForm.delivery)
async def get_delivery(call: CallbackQuery, state: FSMContext):
    await state.update_data(delivery=call.data.replace("delivery_", ""))
    data = await state.get_data()
    await call.message.answer(
        f"üì¶ <b>{data['name']}</b>\nüèô –ì–æ—Ä–æ–¥: {data['city']}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\nüöö –ü–µ—Ä–µ–¥–∞—á–∞: {data['delivery']}\nüë§ @{call.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no")
        )
    )
    await ProductForm.confirm.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == "confirm_yes", state=ProductForm.confirm)
async def confirm_post(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = call.from_user.id
    data['username'] = call.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    with open(f"data_{user_id}.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"),
        InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{user_id}")
    )
    await bot.send_message(MODERATOR_CHAT_ID, f"–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @{data['username']}", reply_markup=kb)
    await call.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await state.finish()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve(callback: CallbackQuery):
    uid = callback.data.split("_")[1]
    with open(f"data_{uid}.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    caption = (
        f"üì¶ <b>{data['name']}</b>\nüèô {data['city']}\nüìÅ {data['category']}\nüìú {data['description']}\nüöö {data['delivery']}\nüë§ @{data['username']}"
    )
    if data.get("photos"):
        await bot.send_photo(CHANNEL_ID, data["photos"][0], caption=caption, parse_mode="HTML")
    else:
        await bot.send_message(CHANNEL_ID, caption, parse_mode="HTML")
    await bot.send_message(uid, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await callback.message.edit_reply_markup()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def reject(callback: CallbackQuery):
    uid = callback.data.split("_")[1]
    await bot.send_message(uid, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.message.edit_reply_markup()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("ban_"))
async def ban(callback: CallbackQuery):
    uid = int(callback.data.split("_")[1])
    banned = load_banned_users()
    if uid not in banned:
        banned.append(uid)
        save_banned_users(banned)
    await bot.send_message(uid, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    await callback.message.edit_reply_markup()
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    await callback.message.edit_reply_markup()
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
