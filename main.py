import logging
import os
import json
import csv
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from inline_categories import get_inline_categories_keyboard
from inline_cities import get_city_keyboard

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATOR_CHAT_ID = int(os.getenv("MODERATOR_CHAT_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class ProductForm(StatesGroup):
    category = State()
    city = State()
    custom_city = State()
    name = State()
    photos = State()
    description = State()
    delivery = State()
    confirm = State()

@dp.message_handler(commands=['start', 'sell'])
async def cmd_start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_inline_categories_keyboard())
    await ProductForm.category.set()

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"), state=ProductForm.category)
async def category_selected(call: CallbackQuery, state: FSMContext):
    category_map = {
        "cat_clothes": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
        "cat_tech": "–¢–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        "cat_home": "–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏",
        "cat_kids": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π",
        "cat_hobby": "–•–æ–±–±–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "cat_beauty": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
        "cat_auto": "–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã",
        "cat_pets": "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        "cat_collectibles": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ—â–∏",
        "cat_misc": "–†–∞–∑–Ω–æ–µ",
    }
    await state.update_data(category=category_map[call.data])
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard())
    await ProductForm.city.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("city_"), state=ProductForm.city)
async def city_selected(call: CallbackQuery, state: FSMContext):
    if call.data == "city_custom":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        await ProductForm.custom_city.set()
    else:
        city_map = {
            "city_moscow": "–ú–æ—Å–∫–≤–∞",
            "city_spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "city_nsk": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            "city_ekb": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            "city_kzn": "–ö–∞–∑–∞–Ω—å",
            "city_nnov": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"
        }
        await state.update_data(city=city_map[call.data])
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await ProductForm.name.set()
    await call.answer()

@dp.message_handler(state=ProductForm.custom_city)
async def get_custom_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await ProductForm.name.set()

@dp.message_handler(state=ProductForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    await ProductForm.photos.set()

@dp.message_handler(content_types=['photo'], state=ProductForm.photos)
async def get_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    if len(photos) >= 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await ProductForm.description.set()
    else:
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="photos_done"))
        await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'.", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "photos_done", state=ProductForm.photos)
async def photos_done(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await ProductForm.description.set()
    await call.answer()

@dp.message_handler(lambda msg: msg.text.lower() == "–¥–∞–ª–µ–µ", state=ProductForm.photos)
async def skip_photos(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await ProductForm.description.set()

@dp.message_handler(state=ProductForm.description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_delivery"),
        InlineKeyboardButton("ü§ù –õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", callback_data="delivery_meeting"),
        InlineKeyboardButton("üì¶+ü§ù –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞", callback_data="delivery_both")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=keyboard)
    await ProductForm.delivery.set()

@dp.callback_query_handler(lambda c: c.data.startswith("delivery_"), state=ProductForm.delivery)
async def get_delivery(call: CallbackQuery, state: FSMContext):
    delivery_methods = {
        "delivery_delivery": "–î–æ—Å—Ç–∞–≤–∫–∞",
        "delivery_meeting": "–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞",
        "delivery_both": "–î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞"
    }
    await state.update_data(delivery=delivery_methods[call.data])
    data = await state.get_data()
    preview = f"üì¶ <b>{data['name']}</b>\nüèô –ì–æ—Ä–æ–¥: {data['city']}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\nüöö –ü–µ—Ä–µ–¥–∞—á–∞: {data['delivery']}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{call.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no")
    )
    await call.message.answer(preview, parse_mode="HTML", reply_markup=keyboard)
    await ProductForm.confirm.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == "confirm_yes", state=ProductForm.confirm)
async def confirm_publish(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not all(data.get(k) for k in ['category', 'city', 'name', 'photos', 'description', 'delivery']):
        await call.message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.")
        await call.answer()
        return

    data['username'] = call.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'
    data['created'] = datetime.now().isoformat()
    user_id = call.from_user.id

    with open(f"data_{user_id}.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

    preview = f"üì¶ <b>{data['name']}</b>\nüìç –ì–æ—Ä–æ–¥: {data['city']}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\nüöö –ü–µ—Ä–µ–¥–∞—á–∞: {data['delivery']}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{data['username']}"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    )

    await bot.send_message(MODERATOR_CHAT_ID, preview, parse_mode="HTML", reply_markup=keyboard)
    await call.message.answer("‚è≥ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await call.answer()
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_ad(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    try:
        with open(f"data_{user_id}.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        await callback.answer("‚õîÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    caption = f"üì¶ <b>{data['name']}</b>\nüèô –ì–æ—Ä–æ–¥: {data['city']}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\nüöö –ü–µ—Ä–µ–¥–∞—á–∞: {data['delivery']}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{data['username']}"

    if data.get("photos"):
        await bot.send_photo(CHANNEL_ID, data["photos"][0], caption=caption, parse_mode="HTML")
    else:
        await bot.send_message(CHANNEL_ID, caption, parse_mode="HTML")

    await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await callback.message.edit_reply_markup()
    await callback.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")

@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def reject_ad(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    await callback.message.edit_reply_markup()
    await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===

admin_keyboard = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
    InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="admin_list_ads"),
    InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="admin_export_csv"),
    InlineKeyboardButton("üßº –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö", callback_data="admin_cleanup")
)

@dp.message_handler(commands=['admin'])
async def admin_panel(message: Message):
    if message.from_user.id != MODERATOR_CHAT_ID:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard)

@dp.callback_query_handler(lambda c: c.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    files = [f for f in os.listdir() if f.startswith("data_") and f.endswith(".json")]
    await callback.message.answer(f"üì¶ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(files)}")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "admin_list_ads")
async def list_ads(callback: CallbackQuery):
    files = [f for f in os.listdir() if f.startswith("data_") and f.endswith(".json")]
    if not files:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    for f in files:
        with open(f, encoding="utf-8") as j:
            data = json.load(j)
            preview = f"üì¶ <b>{data['name']}</b>\n–ì–æ—Ä–æ–¥: {data['city']}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: @{data['username']}"
            await callback.message.answer(preview, parse_mode="HTML")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "admin_export_csv")
async def export_csv(callback: CallbackQuery):
    files = [f for f in os.listdir() if f.startswith("data_") and f.endswith(".json")]
    if not files:
        await callback.message.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    with open("ads_export.csv", "w", newline="", encoding="utf-8") as csvfile:
        fieldnames = ["user_id", "username", "name", "category", "city", "delivery", "description"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for f in files:
            with open(f, encoding="utf-8") as j:
                data = json.load(j)
                writer.writerow({
                    "user_id": f.replace("data_", "").replace(".json", ""),
                    "username": data.get("username"),
                    "name": data.get("name"),
                    "category": data.get("category"),
                    "city": data.get("city"),
                    "delivery": data.get("delivery"),
                    "description": data.get("description")
                })
    await bot.send_document(callback.from_user.id, InputFile("ads_export.csv"))
    await callback.answer("CSV —Å–æ–∑–¥–∞–Ω")

@dp.callback_query_handler(lambda c: c.data == "admin_cleanup")
async def cleanup_old(callback: CallbackQuery):
    now = datetime.now()
    count = 0
    for f in os.listdir():
        if f.startswith("data_") and f.endswith(".json"):
            with open(f, encoding="utf-8") as j:
                data = json.load(j)
                created = datetime.fromisoformat(data.get("created", "2000-01-01T00:00:00"))
                if now - created > timedelta(days=30):
                    os.remove(f)
                    count += 1
    await callback.message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ {count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    await callback.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
